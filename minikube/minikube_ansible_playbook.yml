# Setting host
- hosts: localhost
  gather_facts: false
#Variables
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    image_name: eap-on-ubuntu
    image_tag: latest
    replicas: 1
    app_name: eap72
# Pre-Tasks to validate if Minikube is running
  pre_tasks:
    - name: Check Minikube's status.
      command: minikube status
      register: minikube_status
      changed_when: false
      ignore_errors: true
    # Otherwise will start minikube
    - name: Start Minikube if it's not running.
      command: minikube start
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"
# Check existing images
  tasks:
    - name: Get existing image hash.
      shell: |
        eval $(minikube docker-env)
        docker images -q {{ image_name }}
      register: image_hash
      changed_when: false
# Otherwise will create an image from Dockerfile location
    - name: Build image if it's not already built.
      shell: |
        eval $(minikube docker-env)
        docker build -t {{ image_name }} .
      when: not image_hash.stdout
# Create Kubernetes resources to run EAP 72.
    - name: Create a Deployment for EAP 72.
      k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ app_name }}"
            namespace: default
          spec:
            replicas: "{{ replicas }}"
            selector:
              matchLabels:
                app: "{{ app_name }}"
            template:
              metadata:
                labels:
                  app: "{{ app_name }}"
              spec:
                containers:
                - name: "{{ app_name }}"
                  image: "{{ image_name }}:{{ image_tag }}"
                  imagePullPolicy: IfNotPresent
                  ports:
                  - containerPort: 8080
# Create Kubernetes Service (DNS required)
    # - name: Create a Service for EAP 72.
    #   k8s:
    #     state: present
    #     definition:
    #       apiVersion: v1
    #       kind: Service
    #       metadata:
    #         name: eap72
    #         namespace: default
    #       spec:
    #         type: LoadBalancer
    #         ports:
    #         - port: 8080
    #           targetPort: 8080
    #         selector:
    #           app: eap72
    # - name: Check if application is exposed.
    #   command: kubectl get svc {{ app_name }} -o name
    #   register: svc_name
    #   changed_when: false
    #- name: Remove any existing service 
    #  shell: |
    #    kubectl delete svc {{ app_name }}
    - name: Expose the application.
      shell: |
        kubectl expose deployment {{ app_name }} --type=LoadBalancer --port=8080
    # when: not svc_name.stdout
  post_tasks:
    #Example export using minikube services
    #- name: Expose EAP 72 on the host via Minikube.
    #  command: minikube service {{ app_name }} 
      #--url=true
    #  changed_when: false
      # register: minikube_service
    # - debug:
    #     msg: "EAP 72 URL: {{ minikube_service['stdout_lines'][0] }}"
    # - name: Verify EAP 72 is responding.
    #   uri:
    #     url: "{{ minikube_service['stdout_lines'][0] }}/test"
    #     return_content: true
    #   register: eap_72_response
    #   failed_when: "'/test' not in eap_72_response.content"
    # - debug:
    #     msg: "Testing URL EAP 72 Requested: {{eap_72_response.content}} Status: {{eap_72_response.status}}"
